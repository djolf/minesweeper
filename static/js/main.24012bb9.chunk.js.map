{"version":3,"sources":["Tile.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","_useState","useState","_useState2","Object","slicedToArray","isFlagged","setIsFlagged","_useState3","isOpen","_useState4","setIsOpen","useEffect","gameStatusChanged","gameStatus","click","updateBoard","x","y","num","isBomb","gameOver","react_default","a","createElement","className","classes","concat","getClasses","onClick","onContextMenu","e","preventDefault","bind","Board","tiles","setTiles","setGameStatus","_useState5","mines","_useState6","minesLeft","row","col","console","log","bombs","arr","Array","fill","i","length","j","Math","floor","random","_ref","randomizeBombPositions","map","index","tile","key","countAdjacentBombs","count","openAdjacent","tilesArr","toConsumableArray","newGame","src_Tile_0","Game","gameId","setGameId","src_Board_0","App","src_Game_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24012bb9.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './Tile.scss';\r\n\r\nconst Tile = props => {\r\n  const [isFlagged, setIsFlagged] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(props.isOpen);\r\n\r\n  useEffect(() => {\r\n    gameStatusChanged(props.gameStatus);\r\n  }, [props.gameStatus]);\r\n\r\n  useEffect(() => {\r\n    if (props.isOpen) {\r\n      click();\r\n    } \r\n  }, [props.isOpen]);\r\n\r\n  const gameStatusChanged = gameStatus => {\r\n    if (gameStatus === 1) {\r\n      // gameover\r\n      if (!isFlagged) {\r\n        setIsOpen(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const getClasses = () => {\r\n    let classes = `tile${isFlagged?' flagged':''}`;\r\n    if (isOpen) {\r\n      classes += ' open';\r\n      if (props.isBomb) {\r\n        classes += ' bomb';\r\n      }\r\n    }\r\n    return classes;\r\n  }\r\n\r\n  function printXY() {\r\n    return props.x+','+props.y;\r\n  }\r\n\r\n  const click = () => {\r\n    if (!isOpen && !isFlagged) {\r\n      setIsOpen(true);\r\n      props.updateBoard(props.x,props.y,props.num);\r\n      if (props.isBomb) {\r\n        props.gameOver();\r\n      // } else {\r\n        // if (props.num===0) {\r\n        //   props.openAdjacent(props.x,props.y);\r\n        // }\r\n      }\r\n    }\r\n  }\r\n\r\n  const rightClick = e => {\r\n    e.preventDefault();\r\n    if (!isOpen && props.gameStatus===0) {\r\n      setIsFlagged(!isFlagged);\r\n    }\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className={getClasses()} onClick={click} onContextMenu={rightClick.bind(this)}>\r\n      <span>{props.num}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import React, { useState,useEffect } from 'react';\r\nimport './Board.scss';\r\nimport Tile from './Tile';\r\n\r\nconst Board = props => {\r\n  const [tiles, setTiles] = useState([]);\r\n  const [gameStatus, setGameStatus] = useState(0);\r\n  const [minesLeft, setMinesLeft] = useState(props.mines);\r\n\r\n  const randomizeBombPositions = (row, col, mines) => {\r\n    let total = row*col;\r\n    let arr = Array(total-mines).fill(false).concat(Array(mines).fill(true));\r\n    for (let i=arr.length-1;i>0;i--) {\r\n      let j = Math.floor(Math.random()*(i+1));\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  const generateBoard = (row, col, mines) => {\r\n    console.log(`creating array with row=${row}, col=${col}, mines=${mines}`);\r\n    let bombs = randomizeBombPositions(row, col, mines);\r\n    let tiles = Array(row).fill().map(()=>Array(col).fill());\r\n    let index = 0;\r\n    return tiles.map(row => {\r\n      return row.map(() => {\r\n        let tile = {\r\n          isBomb: bombs[index],\r\n          key: index,\r\n          isOpen: false \r\n        }\r\n        index++;\r\n        return tile;\r\n      });\r\n    });\r\n  }\r\n  \r\n  useEffect(()=>{\r\n    setTiles(generateBoard(props.row, props.col, props.mines));\r\n  },[])\r\n\r\n  const gameOver = () => {\r\n    setGameStatus(1);\r\n  }\r\n\r\n  const countAdjacentBombs = (x,y) => {\r\n    var count = 0;\r\n    if (tiles[x][y].isBomb) {\r\n      return -1; //bomb, dont need to count\r\n    }\r\n    //up\r\n    if (x>0 && tiles[x-1][y].isBomb) {\r\n      count++;\r\n    }\r\n    //down\r\n    if (x<props.row-1 && tiles[x+1][y].isBomb) {\r\n      count++;\r\n    }\r\n    //left\r\n    if (y>0 && tiles[x][y-1].isBomb) {\r\n      count++;\r\n    }\r\n    //right\r\n    if (y<props.col-1 && tiles[x][y+1].isBomb) {\r\n      count++;\r\n    }\r\n    //top left\r\n    if (x>0 && y>0 && tiles[x-1][y-1].isBomb) {\r\n      count++;\r\n    }\r\n    //top right\r\n    if (x>0 && y<props.col-1 && tiles[x-1][y+1].isBomb) {\r\n      count++;\r\n    }\r\n    //bottom left\r\n    if (x<props.row-1 && y>0 && tiles[x+1][y-1].isBomb) {\r\n      count++;\r\n    }\r\n    //bottom right\r\n    if (x<props.row-1 && y<props.col-1 && tiles[x+1][y+1].isBomb) {\r\n      count++;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  const openAdjacent = (x,y) => {\r\n    // console.log(\"opening adjacent\",x+\",\"+y);\r\n    let tilesArr = [...tiles];\r\n    //up\r\n    if (x>0) {\r\n      tilesArr[x-1][y].isOpen = true;\r\n    }\r\n    //down\r\n    if (x<props.row-1) {\r\n      tilesArr[x+1][y].isOpen = true;\r\n    }\r\n    //left\r\n    if (y>0) {\r\n      tilesArr[x][y-1].isOpen = true;\r\n    }\r\n    //right\r\n    if (y<props.col-1) {\r\n      tilesArr[x][y+1].isOpen = true;\r\n    }\r\n    //top left\r\n    if (x>0 && y>0) {\r\n      tilesArr[x-1][y-1].isOpen = true;\r\n    }\r\n    //top right\r\n    if (x>0 && y<props.col-1) {\r\n      tilesArr[x-1][y+1].isOpen = true;\r\n    }\r\n    //bottom left\r\n    if (x<props.row-1 && y>0) {\r\n      tilesArr[x+1][y-1].isOpen = true;\r\n    }\r\n    //bottom right\r\n    if (x<props.row-1 && y<props.col-1) {\r\n      tilesArr[x+1][y+1].isOpen = true;\r\n    }\r\n    setTiles(tilesArr);\r\n  }\r\n\r\n  const updateBoard = (x,y,num) => {\r\n    tiles[x][y].isOpen = true;\r\n    if (!num) openAdjacent(x,y);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      <div className=\"info-panel\">\r\n        <div className=\"timer\"></div>\r\n        <div className=\"new-game\" onClick={props.newGame}>New Game</div>\r\n        <div className=\"quantity\">{minesLeft}</div>\r\n      </div>\r\n      <div className=\"tile-container\">\r\n        {tiles.map((row,i) => {\r\n          return (\r\n            <div className=\"row\" key={i}>\r\n              {\r\n                row.map((tile,j) => {\r\n                  return (\r\n                  <Tile \r\n                    isBomb={tile.isBomb} \r\n                    key={tile.key} \r\n                    x={i} \r\n                    y={j} \r\n                    num={countAdjacentBombs(i,j)}\r\n                    gameOver={gameOver.bind(this)}\r\n                    gameStatus={gameStatus}\r\n                    openAdjacent={openAdjacent}\r\n                    isOpen={tile.isOpen}\r\n                    updateBoard={updateBoard}\r\n                  />)\r\n                })\r\n              }\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, {useState} from 'react';\r\nimport './Game.scss';\r\nimport Board from './Board';\r\n\r\nconst Game = props => {\r\n  const [gameId, setGameId] = useState(0);\r\n\r\n  const newGame = () => {\r\n    setGameId(gameId+1);\r\n  }\r\n  \r\n  return (\r\n    <Board row={15} col={15} mines={20} key={gameId} newGame={newGame}></Board>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport Game from './Game';\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Game></Game>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}