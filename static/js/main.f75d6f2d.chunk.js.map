{"version":3,"sources":["Tile.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","_useState","useState","isFlagged","_useState2","Object","slicedToArray","setIsFlagged","_useState3","isOpen","_useState4","setIsOpen","useEffect","gameStatusChanged","gameStatus","click","isBomb","num","checkFlagsAndOpen","x","y","updateBoard","gameOver","react_default","a","createElement","className","classes","concat","getClasses","onClick","onContextMenu","e","preventDefault","setFlag","bind","Board","tiles","setTiles","setGameStatus","_useState5","mines","_useState6","minesLeft","setMinesLeft","generateBoard","row","col","console","log","bombs","arr","Array","fill","i","length","j","Math","floor","random","_ref","randomizeBombPositions","map","index","tile","key","countAdjacentBombs","count","openAdjacent","tilesArr","toConsumableArray","openCount","reduce","sum","innerSum","flag","checkFlags","openUnflagged","newGame","src_Tile_0","Game","gameId","setGameId","setRow","setCol","_useState7","_useState8","setMines","htmlFor","type","name","value","onChange","Number","target","src_Board_0","App","src_Game_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f75d6f2d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './Tile.scss';\r\n\r\nconst Tile = props => {\r\n  const [isFlagged, setIsFlagged] = useState(props.isFlagged);\r\n  const [isOpen, setIsOpen] = useState(props.isOpen);\r\n\r\n  useEffect(() => {\r\n    gameStatusChanged(props.gameStatus);\r\n  }, [props.gameStatus]);\r\n\r\n  useEffect(() => {\r\n    if (props.isOpen) {\r\n      click();\r\n    } \r\n  }, [props.isOpen]);\r\n\r\n  const gameStatusChanged = gameStatus => {\r\n    if (gameStatus === 1) {\r\n      // gameover\r\n      if (!isFlagged) {\r\n        setIsOpen(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const getClasses = () => {\r\n    let classes = `tile${isFlagged?' flagged':''}`;\r\n    if (isOpen) {\r\n      classes += ' open';\r\n      if (props.isBomb) {\r\n        classes += ' bomb';\r\n      }\r\n    }\r\n    return classes;\r\n  }\r\n\r\n  function printXY() {\r\n    return props.x+','+props.y;\r\n  }\r\n\r\n  const click = () => {\r\n    if (!isOpen && !isFlagged) {\r\n      setIsOpen(true);\r\n      props.updateBoard(props.x,props.y,props.num);\r\n      if (props.isBomb) {\r\n        props.gameOver();\r\n      }\r\n    } else if (!props.isBomb && isOpen && props.num > 0) {\r\n      props.checkFlagsAndOpen(props.x,props.y,props.num);\r\n    }\r\n  }\r\n\r\n  const rightClick = e => {\r\n    e.preventDefault();\r\n    if (!isOpen && props.gameStatus===0) {\r\n      setIsFlagged(!isFlagged);\r\n      props.setFlag(!isFlagged,props.x,props.y);\r\n    }\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className={getClasses()} onClick={click} onContextMenu={rightClick.bind(this)}>\r\n      <span>{props.num}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import React, { useState,useEffect } from 'react';\r\nimport './Board.scss';\r\nimport Tile from './Tile';\r\n\r\nconst Board = props => {\r\n  const [tiles, setTiles] = useState([]);\r\n  const [gameStatus, setGameStatus] = useState(0);\r\n  const [minesLeft, setMinesLeft] = useState(props.mines);\r\n\r\n  const randomizeBombPositions = (row, col, mines) => {\r\n    let total = row*col;\r\n    let arr = Array(total-mines).fill(false).concat(Array(mines).fill(true));\r\n    for (let i=arr.length-1;i>0;i--) {\r\n      let j = Math.floor(Math.random()*(i+1));\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  const generateBoard = (row, col, mines) => {\r\n    console.log(`creating array with row=${row}, col=${col}, mines=${mines}`);\r\n    let bombs = randomizeBombPositions(row, col, mines);\r\n    let tiles = Array(row).fill().map(()=>Array(col).fill());\r\n    let index = 0;\r\n    return tiles.map(row => {\r\n      return row.map(() => {\r\n        let tile = {\r\n          isBomb: bombs[index],\r\n          key: index,\r\n          isOpen: false,\r\n          isFlagged: false,\r\n        }\r\n        index++;\r\n        return tile;\r\n      });\r\n    });\r\n  }\r\n  \r\n  useEffect(()=>{\r\n    setTiles(generateBoard(props.row, props.col, props.mines));\r\n    return () => {\r\n      console.log('cleanup');\r\n      setTiles([]);\r\n      setMinesLeft(0);\r\n    }\r\n  },[])\r\n\r\n  const gameOver = () => {\r\n    setGameStatus(1);\r\n  }\r\n\r\n  const countAdjacentBombs = (x,y) => {\r\n    var count = 0;\r\n    if (tiles[x][y].isBomb) {\r\n      return -1; //bomb, dont need to count\r\n    }\r\n    //up\r\n    if (x>0 && tiles[x-1][y].isBomb) {\r\n      count++;\r\n    }\r\n    //down\r\n    if (x<props.row-1 && tiles[x+1][y].isBomb) {\r\n      count++;\r\n    }\r\n    //left\r\n    if (y>0 && tiles[x][y-1].isBomb) {\r\n      count++;\r\n    }\r\n    //right\r\n    if (y<props.col-1 && tiles[x][y+1].isBomb) {\r\n      count++;\r\n    }\r\n    //top left\r\n    if (x>0 && y>0 && tiles[x-1][y-1].isBomb) {\r\n      count++;\r\n    }\r\n    //top right\r\n    if (x>0 && y<props.col-1 && tiles[x-1][y+1].isBomb) {\r\n      count++;\r\n    }\r\n    //bottom left\r\n    if (x<props.row-1 && y>0 && tiles[x+1][y-1].isBomb) {\r\n      count++;\r\n    }\r\n    //bottom right\r\n    if (x<props.row-1 && y<props.col-1 && tiles[x+1][y+1].isBomb) {\r\n      count++;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  const openAdjacent = (x,y) => {\r\n    // console.log(\"opening adjacent\",x+\",\"+y);\r\n    let tilesArr = [...tiles];\r\n    //up\r\n    if (x>0) {\r\n      tilesArr[x-1][y].isOpen = true;\r\n    }\r\n    //down\r\n    if (x<props.row-1) {\r\n      tilesArr[x+1][y].isOpen = true;\r\n    }\r\n    //left\r\n    if (y>0) {\r\n      tilesArr[x][y-1].isOpen = true;\r\n    }\r\n    //right\r\n    if (y<props.col-1) {\r\n      tilesArr[x][y+1].isOpen = true;\r\n    }\r\n    //top left\r\n    if (x>0 && y>0) {\r\n      tilesArr[x-1][y-1].isOpen = true;\r\n    }\r\n    //top right\r\n    if (x>0 && y<props.col-1) {\r\n      tilesArr[x-1][y+1].isOpen = true;\r\n    }\r\n    //bottom left\r\n    if (x<props.row-1 && y>0) {\r\n      tilesArr[x+1][y-1].isOpen = true;\r\n    }\r\n    //bottom right\r\n    if (x<props.row-1 && y<props.col-1) {\r\n      tilesArr[x+1][y+1].isOpen = true;\r\n    }\r\n    setTiles(tilesArr);\r\n  }\r\n\r\n  const updateBoard = (x,y,num) => {\r\n    tiles[x][y].isOpen = true;\r\n    if (!num) openAdjacent(x,y);\r\n    // let count = openCount();\r\n    // console.log('openCount',count);\r\n    if (props.row*props.col-props.mines === openCount()) setGameStatus(2); //win\r\n  }\r\n\r\n  const openCount = () => {\r\n    // return tiles.filter(tile => tile.isOpen).length;\r\n    return tiles.reduce((sum,row) => {\r\n      return sum+row.reduce((innerSum,tile) => {\r\n        if (tile.isOpen) return innerSum+1;\r\n        return innerSum;\r\n      },0);\r\n    },0);\r\n  }\r\n\r\n  const displayGameStatus = () => {\r\n    if (gameStatus === 0) return 'Ongoing...';\r\n    if (gameStatus === 1) return 'Lost!';\r\n    if (gameStatus === 2) return 'Won!';\r\n  }\r\n\r\n  const setFlag = (flag,x,y) => {\r\n    let tilesArr = [...tiles];\r\n    if (flag) {\r\n      tilesArr[x][y].isFlagged = true;\r\n      setMinesLeft(minesLeft-1);\r\n    } else {\r\n      tilesArr[x][y].isFlagged = false;\r\n      setMinesLeft(minesLeft+1);\r\n    }\r\n    setTiles(tilesArr);\r\n  }\r\n\r\n  const checkFlagsAndOpen = (x,y,num) => {\r\n    let numFlags = checkFlags(x,y);\r\n    if (numFlags === num) {\r\n      openUnflagged(x,y);\r\n    }\r\n  }\r\n\r\n  const openUnflagged = (x,y) => {\r\n    let tilesArr = [...tiles];\r\n    //up\r\n    if (x>0 && !tilesArr[x-1][y].isOpen && !tilesArr[x-1][y].isFlagged) {\r\n      tilesArr[x-1][y].isOpen = true;\r\n    }\r\n    //down\r\n    if (x<props.row-1 && !tilesArr[x+1][y].isOpen && !tilesArr[x+1][y].isFlagged) {\r\n      tilesArr[x+1][y].isOpen = true;\r\n    }\r\n    //left\r\n    if (y>0 && !tilesArr[x][y-1].isOpen && !tilesArr[x][y-1].isFlagged) {\r\n      tilesArr[x][y-1].isOpen = true;\r\n    }\r\n    //right\r\n    if (y<props.col-1 && !tilesArr[x][y+1].isOpen && !tilesArr[x][y+1].isFlagged) {\r\n      tilesArr[x][y+1].isOpen = true;\r\n    }\r\n    //top left\r\n    if (x>0 && y>0 && !tilesArr[x-1][y-1].isOpen && !tilesArr[x-1][y-1].isFlagged) {\r\n      tilesArr[x-1][y-1].isOpen = true;\r\n    }\r\n    //top right\r\n    if (x>0 && y<props.col-1 && !tilesArr[x-1][y+1].isOpen && !tilesArr[x-1][y+1].isFlagged) {\r\n      tilesArr[x-1][y+1].isOpen = true;\r\n    }\r\n    //bottom left\r\n    if (x<props.row-1 && y>0 && !tilesArr[x+1][y-1].isOpen && !tilesArr[x+1][y-1].isFlagged) {\r\n      tilesArr[x+1][y-1].isOpen = true;\r\n    }\r\n    //bottom right\r\n    if (x<props.row-1 && y<props.col-1 && !tilesArr[x+1][y+1].isOpen && !tilesArr[x+1][y+1].isFlagged) {\r\n      tilesArr[x+1][y+1].isOpen = true;\r\n    }\r\n    setTiles(tilesArr);\r\n  }\r\n\r\n  const checkFlags = (x,y) => {\r\n    let count = 0;\r\n    //up\r\n    if (x>0 && tiles[x-1][y].isFlagged) {\r\n      count++;\r\n    }\r\n    //down\r\n    if (x<props.row-1 && tiles[x+1][y].isFlagged) {\r\n      count++;\r\n    }\r\n    //left\r\n    if (y>0 && tiles[x][y-1].isFlagged) {\r\n      count++;\r\n    }\r\n    //right\r\n    if (y<props.col-1 && tiles[x][y+1].isFlagged) {\r\n      count++;\r\n    }\r\n    //top left\r\n    if (x>0 && y>0 && tiles[x-1][y-1].isFlagged) {\r\n      count++;\r\n    }\r\n    //top right\r\n    if (x>0 && y<props.col-1 && tiles[x-1][y+1].isFlagged) {\r\n      count++;\r\n    }\r\n    //bottom left\r\n    if (x<props.row-1 && y>0 && tiles[x+1][y-1].isFlagged) {\r\n      count++;\r\n    }\r\n    //bottom right\r\n    if (x<props.row-1 && y<props.col-1 && tiles[x+1][y+1].isFlagged) {\r\n      count++;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      <div className=\"info-panel\">\r\n        <div className=\"timer\"></div>\r\n        <div className=\"new-game\" onClick={props.newGame}>New Game</div>\r\n        <div className=\"quantity\">Mines Left: {minesLeft}</div>\r\n        {/* <div>Game Status: {displayGameStatus()}</div> */}\r\n        {gameStatus > 0 && \r\n          <div className=\"result\">\r\n            You've {displayGameStatus()}\r\n          </div>\r\n        }\r\n      </div>\r\n      <div className=\"tile-container\">\r\n        {tiles.map((row,i) => {\r\n          return (\r\n            <div className=\"row\" key={i}>\r\n              {\r\n                row.map((tile,j) => {\r\n                  return (\r\n                  <Tile \r\n                    isBomb={tile.isBomb} \r\n                    key={tile.key} \r\n                    x={i} \r\n                    y={j} \r\n                    num={countAdjacentBombs(i,j)}\r\n                    gameOver={gameOver.bind(this)}\r\n                    gameStatus={gameStatus}\r\n                    openAdjacent={openAdjacent}\r\n                    isOpen={tile.isOpen}\r\n                    updateBoard={updateBoard}\r\n                    setFlag={setFlag}\r\n                    checkFlagsAndOpen={checkFlagsAndOpen}\r\n                  />)\r\n                })\r\n              }\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, {useState} from 'react';\r\nimport './Game.scss';\r\nimport Board from './Board';\r\n\r\nconst Game = props => {\r\n  const [gameId, setGameId] = useState(0);\r\n  const [row, setRow] = useState(15);\r\n  const [col, setCol] = useState(15);\r\n  const [mines, setMines] = useState(30);\r\n\r\n\r\n  const newGame = () => {\r\n    setGameId(gameId+1);\r\n  }\r\n\r\n  const handleMinesChange = (e) => {\r\n    setMines(Number(e.target.value));\r\n  }\r\n  const handleRowChange = (e) => {\r\n    setRow(Number(e.target.value));\r\n  }\r\n  const handleColChange = (e) => {\r\n    setCol(Number(e.target.value));\r\n  }\r\n  \r\n  return (\r\n    <div className=\"outer-wrapper\">\r\n      <div className=\"game-params\">\r\n        <div className=\"group\">\r\n          <label htmlFor=\"mines\">Number of Mines:</label>\r\n          <input type=\"number\" name=\"mines\" value={mines} onChange={handleMinesChange}/>\r\n        </div>\r\n        <div className=\"group\">\r\n          <label htmlFor=\"col\">Number of Columns:</label>\r\n          <input type=\"number\" name=\"col\" value={col} onChange={handleColChange}/>\r\n        </div>\r\n        <div className=\"group\">\r\n          <label htmlFor=\"row\">Number of Rows:</label>\r\n          <input type=\"number\" name=\"row\" value={row} onChange={handleRowChange}/>\r\n        </div>\r\n      </div>\r\n      <Board row={row} col={col} mines={mines} key={gameId} newGame={newGame}></Board>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <Game></Game>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}